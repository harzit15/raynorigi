(function() {
  "use strict";

  ready(function() {

    // Web Widget functionality
    if (typeof zE !== "undefined") {
      var chatTimeoutInMinutes = 10;
      var targetNode = document.body;
      var config = { attributes: false, childList: true, subtree: false };
      var isSignedIn = window.Theme.signedIn;
      var isObserving = true;

      var redirectUser = function(el) {
        zE('webWidget:on', 'open', function() {
          zE('webWidget', 'close');
          window.location.href = window.Theme.signInUrl;
        });
      };

      var callback = (mutationList, observer) => {
        for (const mutation of mutationList) {
          if (mutation.type === 'childList') {
            var addedNode = mutation.addedNodes[0] || null;
            var firstChild = addedNode ? addedNode.firstElementChild : null;
            if (firstChild && firstChild.id === 'launcher') {
              redirectUser(firstChild)
              observer.disconnect();
              isObserving = false;
            }
          }
        }
      };

      if (!isSignedIn) {
        var observer = new MutationObserver(callback);
        observer.observe(targetNode, config);

        // Stop observing if a match isn't found within 10 seconds
        setTimeout(function() {
          if (isObserving) {
            observer.disconnect();
            isObserving = false;
          }
        }, 10000);
      }

      setTimeout(function() {
        clearInterval(timer);
        zE('webWidget', 'close');
      }, chatTimeoutInMinutes * 60 * 1000);

      // Send current URL to GA when a user opens a chat
      zE('webWidget:on', 'open', function() {
        var currentUrl = window.location.href;
        ga('send', 'event', 'Open Chat', 'Opened', currentUrl);
      });

      // Open chat using a link
      var chatTriggerElements = document.querySelectorAll('[data-chat-trigger], a[href="#chat"]');
      chatTriggerElements.forEach(function(btn) {
        btn.addEventListener('click', function(e) {
          zE('webWidget', 'open');
          e.preventDefault();
        });
      });

      // Hide chat on the Home page
      if (Util.isHomePage() && typeof zE === 'function' && Theme.pagesToHideChat.indexOf('/') !== -1) {
        zE('webWidget', 'hide');
      }

      // Hide chat on specific pages
      if (Theme.pagesToHideChat && Theme.pagesToHideChat.indexOf(Util.getPageId()) !== -1 && typeof zE === 'function') {
        zE('webWidget', 'hide');
      }

      // Keep chat connection alive
      var timer = setInterval(keepConnection, 1000);
      function keepConnection() {
        Util.triggerEvent(document, 'mousemove');
      }
    }

    if ((Util.isCategoryPage() || Util.isSectionPage()) && window.location.hash) {
      if (window.location.hash.startsWith('#article-')) {
        var el = document.querySelector(window.location.hash);
        if (el) {
          Util.triggerEvent(el, 'collapse:show');
          el.classList.add('is-visible');
          Util.scrollIntoView(el);
        }
      } else {
        var toggles = document.querySelectorAll('[id^="article-toggle-"]');
        if (toggles.length) {
          var title = decodeURIComponent(window.location.hash);
          Array.prototype.forEach.call(toggles, function(toggle) {
            var a = toggle.querySelector('a');
            if (a.innerText.trim() === title.substring(1)) {
              var collapse = toggle.querySelector('.collapse');
              if (collapse) {
                Util.triggerEvent(collapse, 'collapse:show');
                collapse.classList.add('is-visible');
                Util.scrollIntoView(collapse);
              }
            }
          });
        }
      }

    }

    var searchButton = document.getElementById('search-button');
    var primarySearch = document.getElementById('primary-search');
    if (searchButton && primarySearch) {
      searchButton.addEventListener('click', function(e) {
        // Util.scrollIntoView(primarySearch);
        var searchField = primarySearch.querySelector('input[type="search"]');
        if (searchField) searchField.focus();
        e.preventDefault();
      });
    }

    // Restore focus after page reload
    var returnFocusTo = sessionStorage.getItem('returnFocusTo');
    if (returnFocusTo) {
      sessionStorage.removeItem('returnFocusTo');
      var returnFocusToEl = document.querySelector(returnFocusTo);
      returnFocusToEl && returnFocusToEl.focus && returnFocusToEl.focus();
    }

    // Render inline micro-templates
    each('[data-element="template"]', function(el) {
      if (el.hasAttribute('data-template')) {
        Util.renderTemplate(el, el.getAttribute('data-template'));
      }
    });

    /**
     * Converts HTML links within a given element into objects.
     * @param el
     * @returns {[]}
     */
    var convertLinksToObjects = function(el) {
      return Array.prototype.map.call(el.querySelectorAll('a'), function(a) {
        return { title: a.innerText, html_url: a.href };
      });
    };

    // Render Zendesk helper micro-templates
    // @see https://developer.zendesk.com/documentation/help_center/help-center-templates/helpers/
    var supportedHelpers = ['breadcrumbs', 'recent-articles', 'related-articles', 'recent-activity', 'share'];
    supportedHelpers.forEach(function(helper) {
      each('[data-element="' + helper + '"]', function(el) {
        if (el.hasAttribute('data-template')) {
          var data = {};

          // Breadcrumb helper data
          if (helper === 'breadcrumbs') {
            data = { breadcrumbs: convertLinksToObjects(el) };
          }

          // Recent and related articles helper data
          else if (helper === 'recent-articles' || helper === 'related-articles') {
            data = { articles: convertLinksToObjects(el) };
          }

          // Recent activity helper data
          else if (helper === 'recent-activity') {
            data = { items: convertLinksToObjects(el) };
          }

          // Social share links helper data
          else if (helper === 'share') {
            var links = Array.prototype.map.call(el.querySelectorAll('a'), function(a) {
              var svg = a.querySelector('svg');
              return {
                title: a.getAttribute('aria-label'),
                description: svg ? svg.getAttribute('aria-label') : '',
                html_url: a.href
              };
            });
            data = { links: links };
          }

          // Render the micro-template
          Util.renderTemplate(el, el.getAttribute('data-template'), data);
        }
      });
    });

    // Open social sharing links in a new window
    each('.share a', function(a) {
      a.addEventListener('click', function(e) {
        e.preventDefault();
        window.open(this.href, '', 'height = 500, width = 500');
      });
    });

    // Add focus classname to search field
    each('.form-field [type="search"]', function(el) {
      el.addEventListener('focus', function() { this.parentNode.classList.add(Util.classNames.FOCUS); });
      el.addEventListener('focusout', function() { this.parentNode.classList.remove(Util.classNames.FOCUS); });
    });

    // Replace images with inline SVG
    Array.prototype.forEach.call(document.querySelectorAll('[data-inline-svg]'), Util.replaceWithSVG);

    // Smooth scroll
    function maybeScroll() {
      var smoothScroll = Util.getURLParameter('smooth-scroll', window.location);
      if (smoothScroll === 'true' && window.location.hash) {
        var offset = Util.getURLParameter('offset', window.location);
        var target = document.getElementById(window.location.hash.substring(1).split("?")[0]);
        Util.scrollIntoView(target, offset);
      }
    }

    window.addEventListener('hashchange', maybeScroll, false);
    maybeScroll();

    /**
     * Collapsible nav plugin.
     * @param el
     * @constructor
     */
    function CollapsibleNav(el) {
      this.el = el;
      el.addEventListener('click', this.onClick.bind(this));
    }

    CollapsibleNav.prototype = {

      onClick: function(e) {
        var maxHeight = window.getComputedStyle(this.el).maxHeight;
        if (maxHeight === 'none') {
          return;
        }

        var isExpanded = this.el.getAttribute('aria-expanded') === 'true';
        var navLink = e.target;

        if (isExpanded) {

          // Close the nav if the clicked link is selected
          if (navLink.getAttribute('aria-selected') === 'true') {
            this.el.setAttribute('aria-expanded', 'false');
            this.el.classList.remove('is-expanded');
            navLink.setAttribute('aria-selected', 'false');
            e.preventDefault();
          }
        } else {

          // Open the nav if it's closed
          this.el.setAttribute('aria-expanded', 'true');
          this.el.classList.add('is-expanded');
          navLink.setAttribute('aria-selected', 'true');
          e.preventDefault();
        }
      }
    };

    each('.collapsible-nav', function(nav) {
      new CollapsibleNav(nav);
    });

    window.CollapsibleNav = CollapsibleNav;

    // Magnific popup
    if ($ && $.magnificPopup) {
      $(".image-with-lightbox").magnificPopup({
        type: "image",
        closeOnContentClick: !0,
        closeBtnInside: !1,
        fixedContentPos: !0,
        mainClass: "mfp-with-zoom",
        image: {
          verticalFit: !0
        },
        zoom: {
          enabled: !0,
          duration: 300
        }
      });

      $(".image-with-video-icon").magnificPopup({
        disableOn: 700,
        type: "iframe",
        mainClass: "mfp-fade",
        removalDelay: 160,
        preloader: !1,
        fixedContentPos: !1
      });
    }

  });
})();